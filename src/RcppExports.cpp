// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SSI
arma::mat SSI(arma::mat x, arma::vec y);
RcppExport SEXP _BOLTSSIRR_SSI(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(SSI(x, y));
    return rcpp_result_gen;
END_RCPP
}


// BOLT_SSI
RcppExport SEXP BOLT_SSI(arma::mat X, arma::vec y, int extra_pairs, int code_num, int thread_num);
RcppExport SEXP _BOLTSSIRR_BOLT_SSI(SEXP XSEXP, SEXP ySEXP, SEXP extra_pairsSEXP, SEXP code_numSEXP, SEXP thread_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type extra_pairs(extra_pairsSEXP);
    Rcpp::traits::input_parameter< int >::type code_num(code_numSEXP);
    Rcpp::traits::input_parameter< int >::type thread_num(thread_numSEXP);
    rcpp_result_gen = Rcpp::wrap(BOLT_SSI(X, y, extra_pairs, code_num, thread_num));
    return rcpp_result_gen;
END_RCPP
}
// BOLT_SSI_RR
RcppExport SEXP BOLT_SSI_RR(arma::mat X, arma::vec y, int extra_pairs, int code_num, int nLambda, int thread_num);
RcppExport SEXP _BOLTSSIRR_BOLT_SSI_RR(SEXP XSEXP, SEXP ySEXP, SEXP extra_pairsSEXP, SEXP code_numSEXP, SEXP nLambdaSEXP, SEXP thread_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type extra_pairs(extra_pairsSEXP);
    Rcpp::traits::input_parameter< int >::type code_num(code_numSEXP);
    Rcpp::traits::input_parameter< int >::type nLambda(nLambdaSEXP);
    Rcpp::traits::input_parameter< int >::type thread_num(thread_numSEXP);
    rcpp_result_gen = Rcpp::wrap(BOLT_SSI_RR(X, y, extra_pairs, code_num, nLambda, thread_num));
    return rcpp_result_gen;
END_RCPP
}
// CV_BOLT_SSI_RR
RcppExport SEXP CV_BOLT_SSI_RR(arma::mat X, arma::vec y, int extra_pairs, int code_num, int nfold, int nLambda, int thread_num);
RcppExport SEXP _BOLTSSIRR_CV_BOLT_SSI_RR(SEXP XSEXP, SEXP ySEXP, SEXP extra_pairsSEXP, SEXP code_numSEXP, SEXP nfoldSEXP, SEXP nLambdaSEXP, SEXP thread_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type extra_pairs(extra_pairsSEXP);
    Rcpp::traits::input_parameter< int >::type code_num(code_numSEXP);
    Rcpp::traits::input_parameter< int >::type nfold(nfoldSEXP);
    Rcpp::traits::input_parameter< int >::type nLambda(nLambdaSEXP);
    Rcpp::traits::input_parameter< int >::type thread_num(thread_numSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_BOLT_SSI_RR(X, y, extra_pairs, code_num, nfold, nLambda, thread_num));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _BOLTSSIRR_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BOLTSSIRR_BOLT_SSI", (DL_FUNC) &_BOLTSSIRR_BOLT_SSI, 5},
    {"_BOLTSSIRR_BOLT_SSI_RR", (DL_FUNC) &_BOLTSSIRR_BOLT_SSI_RR, 6},
    {"_BOLTSSIRR_SSI", (DL_FUNC) &_BOLTSSIRR_SSI, 2},
    {"_BOLTSSIRR_CV_BOLT_SSI_RR", (DL_FUNC) &_BOLTSSIRR_CV_BOLT_SSI_RR, 7},
    {"_BOLTSSIRR_rcpp_hello", (DL_FUNC) &_BOLTSSIRR_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_BOLTSSIRR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
